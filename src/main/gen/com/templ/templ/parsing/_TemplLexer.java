// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TemplLexer.flex

package com.templ.templ.parsing;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import org.bouncycastle.util.Arrays;
import com.intellij.util.containers.Stack;import q.H.W;

import static com.intellij.psi.TokenType.*;
import static com.templ.templ.psi.TemplTypes.*;


public class _TemplLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEMPL_DECLARATION_START = 2;
  public static final int IN_TEMPL_DECLARATION_BODY = 4;
  public static final int IN_CSS_DECLARATION_START = 6;
  public static final int IN_CSS_DECLARATION_PARAMS = 8;
  public static final int IN_CSS_DECLARATION_BODY = 10;
  public static final int IN_SCRIPT_DECLARATION_START = 12;
  public static final int IN_SCRIPT_DECLARATION_BODY = 14;
  public static final int IN_RAW_GO = 16;
  public static final int IN_EXPR = 18;
  public static final int IN_GO_BLOCK_START = 20;
  public static final int IN_CLASS_EXPR = 22;
  public static final int IN_COMPONENT_IMPORT = 24;
  public static final int IN_COMPONENT_IMPORT_STRUCT_LITERAL = 26;
  public static final int IN_COMPONENT_IMPORT_PARAMS = 28;
  public static final int IN_COMPONENT_IMPORT_PARAMS_END_WITHOUT_CHILDREN = 30;
  public static final int IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START = 32;
  public static final int IN_BLOCK_COMMENT = 34;
  public static final int IN_GO_STRING = 36;
  public static final int IN_GO_RAW_STRING = 38;
  public static final int IN_HTML_COMMENT = 40;
  public static final int IN_HTML_TAG_OPENER = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  8,  9,  9, 10, 11, 
    12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 17, 17, 
    19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u7400\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\4\0\1\10\1\11\1\12\1\13\1\0"+
    "\1\14\1\15\1\16\1\17\12\20\1\21\1\0\1\22"+
    "\1\23\1\24\1\25\1\26\32\20\1\0\1\27\2\0"+
    "\1\30\1\31\1\32\1\20\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\20\1\42\1\43\1\44\1\20"+
    "\1\45\1\46\1\20\1\47\1\50\1\51\1\52\1\20"+
    "\1\53\3\20\1\54\1\0\1\55\7\0\1\3\32\0"+
    "\1\56\11\0\1\20\12\0\1\20\4\0\1\20\5\0"+
    "\27\20\1\0\37\20\1\0\u01ca\20\4\0\14\20\16\0"+
    "\5\20\7\0\1\20\1\0\1\20\21\0\160\30\5\20"+
    "\1\0\2\20\2\0\4\20\1\0\1\20\6\0\1\20"+
    "\1\0\3\20\1\0\1\20\1\0\24\20\1\0\123\20"+
    "\1\0\213\20\1\0\7\30\246\20\1\0\46\20\2\0"+
    "\1\20\6\0\51\20\10\0\55\30\1\0\1\30\1\0"+
    "\2\30\1\0\2\30\1\0\1\30\10\0\33\20\4\0"+
    "\4\20\35\0\13\30\5\0\53\20\25\30\12\20\4\0"+
    "\2\20\1\30\143\20\1\0\1\20\7\30\2\0\6\30"+
    "\2\20\2\30\1\0\4\30\17\20\2\0\1\20\20\0"+
    "\1\20\1\30\36\20\33\30\2\0\131\20\13\30\1\20"+
    "\16\0\53\20\11\30\2\20\4\0\1\20\2\0\1\30"+
    "\2\0\26\20\4\30\1\20\11\30\1\20\3\30\1\20"+
    "\5\30\22\0\31\20\3\30\4\0\13\20\65\0\25\20"+
    "\1\0\10\20\25\0\17\30\1\0\41\30\66\20\3\30"+
    "\1\20\22\30\1\20\7\30\12\20\2\30\2\0\12\20"+
    "\1\0\20\20\3\30\1\0\10\20\2\0\2\20\2\0"+
    "\26\20\1\0\7\20\1\0\1\20\3\0\4\20\2\0"+
    "\1\30\1\20\7\30\2\0\2\30\2\0\3\30\1\20"+
    "\10\0\1\30\4\0\2\20\1\0\3\20\2\30\2\0"+
    "\14\20\12\0\1\20\1\0\1\30\2\0\3\30\1\0"+
    "\6\20\4\0\2\20\2\0\26\20\1\0\7\20\1\0"+
    "\2\20\1\0\2\20\1\0\2\20\2\0\1\30\1\0"+
    "\5\30\4\0\2\30\2\0\3\30\3\0\1\30\7\0"+
    "\4\20\1\0\1\20\7\0\12\20\2\30\3\20\1\30"+
    "\13\0\3\30\1\0\11\20\1\0\3\20\1\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\30"+
    "\1\20\10\30\1\0\3\30\1\0\3\30\2\0\1\20"+
    "\17\0\2\20\2\30\2\0\12\20\11\0\1\20\6\30"+
    "\1\0\3\30\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\30"+
    "\1\20\7\30\2\0\2\30\2\0\3\30\10\0\2\30"+
    "\4\0\2\20\1\0\3\20\2\30\2\0\12\20\1\0"+
    "\1\20\20\0\1\30\1\20\1\0\6\20\3\0\3\20"+
    "\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20"+
    "\3\0\2\20\3\0\3\20\3\0\14\20\4\0\5\30"+
    "\3\0\3\30\1\0\4\30\2\0\1\20\6\0\1\30"+
    "\16\0\12\20\20\0\5\30\10\20\1\0\3\20\1\0"+
    "\27\20\1\0\20\20\3\0\1\20\7\30\1\0\3\30"+
    "\1\0\4\30\7\0\2\30\1\0\3\20\5\0\2\20"+
    "\2\30\2\0\12\20\20\0\1\20\3\30\1\0\10\20"+
    "\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20"+
    "\2\0\1\30\1\20\7\30\1\0\3\30\1\0\4\30"+
    "\7\0\2\30\7\0\1\20\1\0\2\20\2\30\2\0"+
    "\12\20\1\0\2\20\15\0\4\30\1\0\10\20\1\0"+
    "\3\20\1\0\51\20\2\30\1\20\7\30\1\0\3\30"+
    "\1\0\4\30\1\20\5\0\3\20\1\30\7\0\3\20"+
    "\2\30\2\0\12\20\12\0\6\20\2\0\2\30\1\0"+
    "\22\20\3\0\30\20\1\0\11\20\1\0\1\20\2\0"+
    "\7\20\3\0\1\30\4\0\6\30\1\0\1\30\1\0"+
    "\10\30\6\0\12\20\2\0\2\30\15\0\60\20\1\30"+
    "\2\20\7\30\5\0\7\20\10\30\1\0\12\20\47\0"+
    "\2\20\1\0\1\20\1\0\5\20\1\0\30\20\1\0"+
    "\1\20\1\0\12\20\1\30\2\20\11\30\1\20\2\0"+
    "\5\20\1\0\1\20\1\0\6\30\2\0\12\20\2\0"+
    "\4\20\40\0\1\20\27\0\2\30\6\0\12\20\13\0"+
    "\1\30\1\0\1\30\1\0\1\30\4\0\2\30\10\20"+
    "\1\0\44\20\4\0\24\30\1\0\2\30\5\20\13\30"+
    "\1\0\44\30\11\0\1\30\71\0\53\20\24\30\13\20"+
    "\6\0\6\20\4\30\4\20\3\30\1\20\3\30\2\20"+
    "\7\30\3\20\4\30\15\20\14\30\1\20\1\30\12\20"+
    "\4\30\2\0\46\20\1\0\1\20\5\0\1\20\2\0"+
    "\53\20\1\0\115\20\1\0\4\20\2\0\7\20\1\0"+
    "\1\20\1\0\4\20\2\0\51\20\1\0\4\20\2\0"+
    "\41\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"+
    "\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0"+
    "\103\20\2\0\3\30\40\0\20\20\20\0\126\20\2\0"+
    "\6\20\3\0\u016c\20\2\0\21\20\1\56\32\20\5\0"+
    "\113\20\3\0\3\30\10\20\7\0\15\20\1\0\4\20"+
    "\3\30\13\0\22\20\3\30\13\0\22\20\2\30\14\0"+
    "\15\20\1\0\3\20\1\0\2\30\14\0\64\20\40\30"+
    "\3\0\1\20\4\0\1\20\1\30\2\0\12\20\41\0"+
    "\3\30\2\0\12\20\6\0\131\20\7\0\5\20\2\30"+
    "\42\20\1\30\1\20\5\0\106\20\12\0\37\20\1\0"+
    "\14\30\4\0\14\30\12\0\50\20\2\0\5\20\13\0"+
    "\54\20\4\0\32\20\6\0\12\20\46\0\27\20\5\30"+
    "\4\0\65\20\12\30\1\0\35\30\2\0\1\30\12\20"+
    "\6\0\12\20\15\0\1\20\10\0\17\30\101\0\5\30"+
    "\57\20\21\30\7\20\4\0\12\20\21\0\11\30\14\0"+
    "\3\30\36\20\15\30\70\20\16\30\14\0\44\20\24\30"+
    "\10\0\12\20\3\0\61\20\2\0\11\20\7\0\53\20"+
    "\2\0\3\20\20\0\3\30\1\0\25\30\4\20\1\30"+
    "\6\20\1\30\2\20\3\30\1\20\5\0\300\20\72\30"+
    "\1\0\5\30\26\20\2\0\6\20\2\0\46\20\2\0"+
    "\6\20\2\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0"+
    "\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0"+
    "\6\20\4\0\15\20\5\0\3\20\1\0\7\20\3\0"+
    "\13\56\35\0\2\3\5\0\1\56\17\0\2\30\23\0"+
    "\1\30\12\0\1\56\21\0\1\20\15\0\1\20\20\0"+
    "\15\20\63\0\41\30\21\0\1\20\4\0\1\20\2\0"+
    "\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0"+
    "\4\20\5\0\5\20\4\0\1\20\21\0\43\30\2\20"+
    "\4\30\u022d\0\64\30\26\0\57\20\1\0\57\20\1\0"+
    "\205\20\6\0\4\20\3\30\2\20\14\0\46\20\1\0"+
    "\1\20\5\0\1\20\2\0\70\20\7\0\1\20\17\0"+
    "\1\30\27\20\11\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\40\30\57\0\1\20\320\0\1\56"+
    "\4\0\2\20\1\30\31\0\17\30\1\0\5\20\2\0"+
    "\3\30\2\20\4\0\126\20\2\0\2\30\2\0\3\20"+
    "\1\0\132\20\1\0\4\20\5\0\53\20\1\0\136\20"+
    "\21\0\33\20\65\0\306\20\112\0\360\20\20\0\215\20"+
    "\103\0\56\20\2\0\15\20\3\0\34\20\24\0\57\20"+
    "\4\30\1\0\12\30\1\0\37\20\2\30\106\20\14\30"+
    "\45\0\11\20\2\0\147\20\2\0\65\20\2\0\5\20"+
    "\60\0\13\20\1\30\3\20\1\30\4\20\1\30\27\20"+
    "\5\30\30\0\64\20\14\0\2\30\62\20\22\30\12\0"+
    "\12\20\6\0\22\30\6\20\3\0\1\20\1\0\2\20"+
    "\1\30\46\20\10\30\2\0\27\20\15\30\14\0\35\20"+
    "\3\0\4\30\57\20\16\30\16\0\13\20\6\0\5\20"+
    "\1\30\31\20\1\0\51\20\16\30\11\0\3\20\1\30"+
    "\10\20\2\30\2\0\12\20\6\0\27\20\3\0\1\20"+
    "\3\30\62\20\1\30\1\20\3\30\2\20\2\30\5\20"+
    "\2\30\1\20\1\30\1\20\30\0\3\20\2\0\13\20"+
    "\5\30\2\0\3\20\2\30\12\0\6\20\2\0\6\20"+
    "\2\0\6\20\11\0\7\20\1\0\7\20\1\0\53\20"+
    "\1\0\14\20\10\0\163\20\10\30\1\0\2\30\2\0"+
    "\12\20\6\0\244\20\14\0\27\20\4\0\61\20\4\0"+
    "\u0100\57\156\20\2\0\152\20\46\0\7\20\14\0\5\20"+
    "\5\0\1\20\1\30\12\20\1\0\15\20\1\0\5\20"+
    "\1\0\1\20\1\0\2\20\1\0\2\20\1\0\154\20"+
    "\41\0\153\20\22\0\100\20\2\0\66\20\50\0\14\20"+
    "\4\0\20\30\20\0\20\30\3\0\2\30\30\0\3\30"+
    "\40\0\5\20\1\0\207\20\23\0\12\20\7\0\32\20"+
    "\4\0\1\30\1\0\32\20\13\0\131\20\3\0\6\20"+
    "\2\0\6\20\2\0\6\20\2\0\3\20\43\0\14\20"+
    "\1\0\32\20\1\0\23\20\1\0\2\20\1\0\17\20"+
    "\2\0\16\20\42\0\173\20\105\0\65\30\210\0\1\30"+
    "\202\0\35\20\3\0\61\20\17\0\1\30\37\0\40\20"+
    "\15\0\24\20\1\30\10\20\1\30\5\0\46\20\5\30"+
    "\5\0\36\20\2\0\44\20\4\0\10\20\1\0\5\30"+
    "\52\0\236\20\2\0\12\20\6\0\44\20\4\0\44\20"+
    "\4\0\50\20\10\0\64\20\234\0\67\20\11\0\26\20"+
    "\12\0\10\20\230\0\6\20\2\0\1\20\1\0\54\20"+
    "\1\0\2\20\3\0\1\20\2\0\27\20\12\0\27\20"+
    "\11\0\37\20\101\0\23\20\1\0\2\20\12\0\26\20"+
    "\12\0\32\20\106\0\70\20\6\0\2\20\100\0\1\20"+
    "\3\30\1\0\2\30\5\0\4\30\4\20\1\0\3\20"+
    "\1\0\35\20\2\0\3\30\4\0\1\30\40\0\35\20"+
    "\3\0\35\20\43\0\10\20\1\0\34\20\2\30\31\0"+
    "\66\20\12\0\26\20\12\0\23\20\15\0\22\20\156\0"+
    "\111\20\67\0\63\20\15\0\63\20\15\0\44\20\4\30"+
    "\10\0\12\20\306\0\35\20\12\0\1\20\10\0\26\20"+
    "\13\30\217\0\27\20\11\0\3\30\65\20\17\30\37\0"+
    "\12\20\17\0\4\30\55\20\13\30\25\0\31\20\7\0"+
    "\12\20\6\0\3\30\44\20\16\30\1\0\12\20\4\0"+
    "\1\20\2\30\11\0\43\20\1\30\2\0\1\20\11\0"+
    "\3\30\60\20\16\30\4\20\4\0\4\30\3\0\13\20"+
    "\1\0\1\20\43\0\22\20\1\0\31\20\14\30\6\0"+
    "\1\30\101\0\7\20\1\0\1\20\1\0\4\20\1\0"+
    "\17\20\1\0\12\20\7\0\57\20\14\30\5\0\12\20"+
    "\6\0\4\30\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\1\0\2\30"+
    "\1\20\7\30\2\0\2\30\2\0\3\30\2\0\1\20"+
    "\6\0\1\30\5\0\5\20\2\30\2\0\7\30\3\0"+
    "\5\30\213\0\65\20\22\30\4\20\5\0\12\20\4\0"+
    "\1\30\1\20\40\0\60\20\24\30\2\20\1\0\1\20"+
    "\10\0\12\20\246\0\57\20\7\30\2\0\11\30\27\0"+
    "\4\20\2\30\42\0\60\20\21\30\3\0\1\20\13\0"+
    "\12\20\46\0\53\20\15\30\1\20\7\0\12\20\66\0"+
    "\33\20\2\0\17\30\4\0\12\20\306\0\54\20\17\30"+
    "\145\0\112\20\25\0\1\20\240\0\10\20\2\0\47\20"+
    "\7\30\2\0\7\30\1\20\1\0\1\20\1\30\33\0"+
    "\1\20\12\30\50\20\7\30\1\20\4\30\10\0\1\30"+
    "\10\0\1\20\13\30\56\20\20\30\3\0\1\20\42\0"+
    "\71\20\7\0\11\20\1\0\45\20\10\30\1\0\10\30"+
    "\1\20\17\0\12\20\30\0\36\20\2\0\26\30\1\0"+
    "\16\30\111\0\7\20\1\0\2\20\1\0\46\20\6\30"+
    "\3\0\1\30\1\0\2\30\1\0\7\30\1\20\1\30"+
    "\10\0\12\20\6\0\6\20\1\0\2\20\1\0\40\20"+
    "\5\30\1\0\2\30\1\0\5\30\1\20\7\0\12\20"+
    "\u0136\0\23\20\4\30\11\0\232\20\146\0\157\30\21\0"+
    "\304\20\274\0\57\20\321\0\107\20\271\0\71\20\7\0"+
    "\37\20\1\0\12\20\146\0\36\20\2\0\5\30\13\0"+
    "\60\20\7\30\11\0\4\20\14\0\12\20\11\0\25\20"+
    "\5\0\23\20\260\0\100\20\200\0\113\20\4\0\1\30"+
    "\1\20\67\30\7\0\4\30\15\20\100\0\2\20\1\0"+
    "\1\20\34\0\370\20\10\0\363\20\15\0\37\20\61\0"+
    "\3\20\21\0\4\20\10\0\u018c\20\4\0\153\20\5\0"+
    "\15\20\3\0\11\20\7\0\12\20\3\0\2\30\306\0"+
    "\5\30\3\0\6\30\10\0\10\30\2\0\7\30\36\0"+
    "\4\30\224\0\3\30\273\0\125\20\1\0\107\20\1\0"+
    "\2\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0"+
    "\14\20\1\0\1\20\1\0\7\20\1\0\101\20\1\0"+
    "\4\20\2\0\10\20\1\0\7\20\1\0\34\20\1\0"+
    "\4\20\1\0\5\20\1\0\1\20\3\0\7\20\1\0"+
    "\u0154\20\2\0\31\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\10\20\2\0"+
    "\62\20\67\30\4\0\62\30\10\0\1\30\16\0\1\30"+
    "\26\0\5\30\1\0\17\30\120\0\7\30\1\0\21\30"+
    "\2\0\7\30\1\0\2\30\1\0\5\30\325\0\55\20"+
    "\3\0\7\30\7\20\2\0\12\20\4\0\1\20\u0171\0"+
    "\54\20\4\30\12\20\6\0\305\20\13\0\7\30\51\0"+
    "\104\20\7\30\1\20\4\0\12\20\246\0\4\20\1\0"+
    "\33\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\12\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0"+
    "\1\20\4\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\3\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\2\0\4\20\1\0\7\20\1\0"+
    "\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0"+
    "\21\20\5\0\3\20\1\0\5\20\1\0\21\20\164\0"+
    "\32\30\6\0\32\30\6\0\32\30\166\0\327\20\51\0"+
    "\65\20\13\0\336\20\2\0\u0182\20\16\0\u0131\20\37\0"+
    "\36\20\342\0\360\30\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\32\0\1\1\1\2\1\1\1\3\4\1\3\4\3\5"+
    "\1\6\1\5\1\7\1\10\1\5\1\11\5\5\1\12"+
    "\1\13\1\14\1\15\1\13\1\16\1\13\1\17\1\20"+
    "\1\21\1\17\2\22\1\12\3\23\2\24\3\25\1\26"+
    "\1\14\2\26\1\27\1\30\5\25\2\31\1\32\1\33"+
    "\4\34\1\35\1\36\3\37\1\40\1\41\2\40\2\5"+
    "\1\42\3\5\1\43\1\44\4\0\2\45\3\0\1\46"+
    "\1\47\13\0\1\50\1\0\2\51\2\52\1\53\4\0"+
    "\1\54\2\0\2\55\1\0\2\56\1\0\1\57\1\60"+
    "\6\0\1\61\10\0\1\62\3\0\1\63\1\0\2\64"+
    "\1\65\1\66\1\67\4\0\1\70\4\0\1\71\4\0"+
    "\1\72\1\73\6\0\1\74\3\75\1\0\1\76\1\77"+
    "\2\0\1\100\1\0\1\101\2\102\1\0\3\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u04e0\0\u0510\0\u04e0\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u04e0\0\u0510\0\u0600\0\u04e0\0\u0630\0\u0510"+
    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u04e0\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u06f0\0\u04e0\0\u0840\0\u04e0\0\u0510"+
    "\0\u0870\0\u08a0\0\u04e0\0\u04e0\0\u04e0\0\u0510\0\u04e0\0\u0510"+
    "\0\u04e0\0\u04e0\0\u0510\0\u08d0\0\u04e0\0\u0510\0\u04e0\0\u0510"+
    "\0\u0900\0\u04e0\0\u04e0\0\u0510\0\u0930\0\u04e0\0\u04e0\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u04e0\0\u0510\0\u04e0\0\u04e0"+
    "\0\u0a50\0\u0a80\0\u04e0\0\u0ab0\0\u0a50\0\u04e0\0\u04e0\0\u0ae0"+
    "\0\u0510\0\u04e0\0\u04e0\0\u0510\0\u0b10\0\u0b40\0\u0b70\0\u04e0"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u04e0\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u04e0\0\u0d20\0\u0d50\0\u0d80\0\u0690\0\u04e0\0\u04e0"+
    "\0\u06f0\0\u0db0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u04e0\0\u0e70\0\u04e0\0\u0ea0\0\u04e0"+
    "\0\u0ed0\0\u04e0\0\u0f00\0\u0930\0\u0f30\0\u0f60\0\u04e0\0\u0f90"+
    "\0\u0a20\0\u04e0\0\u0fc0\0\u0a50\0\u04e0\0\u0ff0\0\u1020\0\u04e0"+
    "\0\u04e0\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u0c00\0\u04e0"+
    "\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290"+
    "\0\u04e0\0\u12c0\0\u12f0\0\u1320\0\u04e0\0\u1350\0\u04e0\0\u1380"+
    "\0\u04e0\0\u04e0\0\u04e0\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u04e0"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u04e0\0\u1530\0\u1560\0\u1590"+
    "\0\u15c0\0\u04e0\0\u04e0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0"+
    "\0\u16e0\0\u04e0\0\u04e0\0\u15f0\0\u1710\0\u1740\0\u04e0\0\u04e0"+
    "\0\u1770\0\u17a0\0\u04e0\0\u17d0\0\u04e0\0\u04e0\0\u1800\0\u1830"+
    "\0\u04e0\0\u1830\0\u1860\0\u04e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\33\1\34\7\33\1\35\11\33\1\36\35\33\1\34"+
    "\7\33\1\35\11\33\1\36\1\33\1\37\12\33\1\40"+
    "\1\33\1\41\1\42\6\33\7\43\1\34\7\43\1\44"+
    "\11\43\1\36\22\43\1\45\3\43\16\46\1\47\1\50"+
    "\2\46\1\51\1\46\1\52\27\46\1\53\1\54\3\46"+
    "\1\55\2\46\1\55\11\46\1\47\1\50\2\46\1\51"+
    "\1\46\1\52\1\46\1\56\4\46\1\57\1\60\1\46"+
    "\1\61\2\46\1\62\6\46\1\63\3\46\1\53\1\64"+
    "\2\46\1\65\5\66\3\65\1\67\5\65\1\70\1\71"+
    "\7\65\1\71\1\65\22\71\1\72\1\65\1\66\1\65"+
    "\11\73\1\74\1\75\4\73\1\76\40\73\17\77\1\100"+
    "\57\77\1\100\35\77\1\101\2\77\17\102\1\103\34\102"+
    "\1\104\3\102\17\105\1\106\57\105\1\106\35\105\1\101"+
    "\2\105\17\107\1\110\35\107\1\111\2\107\1\112\1\113"+
    "\2\112\1\113\2\112\1\34\7\112\1\114\1\115\10\112"+
    "\1\36\22\115\1\116\1\117\2\112\1\107\1\113\2\107"+
    "\1\113\12\107\1\110\15\107\1\120\1\121\2\107\1\122"+
    "\6\107\1\123\3\107\1\124\3\107\17\125\1\126\34\125"+
    "\1\127\1\130\2\125\1\131\1\132\2\131\1\132\4\131"+
    "\1\133\2\131\1\133\1\131\1\133\1\134\6\131\1\135"+
    "\25\131\1\133\3\131\17\65\1\70\47\65\1\34\7\65"+
    "\1\70\11\65\1\36\27\65\1\113\2\65\1\113\12\65"+
    "\1\70\34\65\1\136\3\65\13\137\1\140\3\137\1\141"+
    "\40\137\2\142\4\65\1\142\1\143\7\142\1\144\7\142"+
    "\1\145\27\142\1\65\17\142\1\144\11\142\1\143\26\142"+
    "\15\46\1\146\1\46\1\50\57\46\1\50\3\46\1\147"+
    "\1\150\1\151\5\46\1\152\20\46\1\53\1\54\3\46"+
    "\1\153\2\46\1\153\12\46\1\50\3\46\1\147\1\150"+
    "\1\151\5\46\1\152\5\46\1\62\12\46\1\53\1\64"+
    "\2\46\73\0\1\154\3\0\1\155\110\0\1\156\41\0"+
    "\1\157\60\0\1\160\61\0\1\161\24\0\3\162\1\163"+
    "\53\0\1\164\2\0\1\164\11\0\1\164\1\0\1\164"+
    "\7\0\1\164\1\0\22\164\12\0\1\165\52\0\1\166"+
    "\2\0\1\166\21\0\1\167\105\0\1\170\4\0\1\171"+
    "\2\0\1\171\30\0\1\172\23\0\1\173\2\0\1\173"+
    "\21\0\1\56\4\0\1\174\1\175\1\0\1\176\2\0"+
    "\1\177\6\0\1\200\41\0\1\201\62\0\1\202\67\0"+
    "\1\203\50\0\1\204\74\0\1\205\5\0\5\66\50\0"+
    "\1\66\21\0\1\71\7\0\1\71\1\0\22\71\6\0"+
    "\3\206\1\207\54\0\3\210\1\211\127\0\1\212\20\0"+
    "\1\213\1\0\1\214\11\0\22\214\47\0\1\215\61\0"+
    "\1\216\50\0\1\217\74\0\1\220\5\0\1\221\1\222"+
    "\1\0\1\221\1\223\53\0\1\224\1\225\1\0\1\224"+
    "\1\226\53\0\1\224\1\225\1\0\1\224\1\226\46\0"+
    "\1\227\4\0\1\224\1\225\1\0\1\224\1\226\5\0"+
    "\1\154\3\0\1\155\57\0\1\230\47\0\1\231\65\0"+
    "\1\232\51\0\1\233\1\234\72\0\1\235\77\0\1\236"+
    "\15\0\1\237\2\0\1\237\34\0\1\177\16\0\2\155"+
    "\4\0\51\155\51\0\1\240\42\0\1\241\73\0\1\242"+
    "\54\0\1\243\15\0\1\162\56\0\1\164\2\0\1\164"+
    "\11\0\1\164\1\0\1\164\7\0\1\164\1\0\22\164"+
    "\1\244\20\0\1\245\105\0\1\246\64\0\1\247\45\0"+
    "\1\250\70\0\1\251\51\0\1\252\20\0\1\206\57\0"+
    "\1\210\73\0\1\253\111\0\1\254\56\0\1\255\51\0"+
    "\1\256\20\0\1\222\57\0\1\225\56\0\1\227\1\257"+
    "\1\0\1\227\1\260\76\0\1\261\33\0\7\233\1\262"+
    "\50\233\10\234\1\262\47\234\54\0\1\263\35\0\1\264"+
    "\67\0\1\265\56\0\1\266\64\0\1\267\11\0\55\244"+
    "\1\46\2\244\15\0\1\270\112\0\1\271\44\0\1\272"+
    "\54\0\1\273\76\0\1\274\24\0\1\125\76\0\1\275"+
    "\73\0\1\276\10\0\1\257\125\0\1\277\41\0\1\300"+
    "\73\0\1\301\54\0\1\302\51\0\1\303\22\0\21\272"+
    "\1\304\36\272\52\0\1\305\40\0\1\306\57\0\1\307"+
    "\74\0\1\310\46\0\1\311\71\0\1\312\7\0\1\304"+
    "\2\313\1\314\1\315\115\0\1\316\54\0\1\317\57\0"+
    "\1\320\42\0\1\321\71\0\1\322\24\0\1\323\126\0"+
    "\1\324\62\0\1\325\3\0\2\322\1\326\2\322\1\327"+
    "\52\322\21\0\1\330\40\0\1\326\56\0\1\330\2\331"+
    "\1\332\1\333\54\0\1\334\55\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6288];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\2\11\1\1\1\11\4\1\1\11\2\1\1\11"+
    "\7\1\1\11\6\1\1\11\1\1\1\11\3\1\3\11"+
    "\1\1\1\11\1\1\2\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\2\1\2\11\5\1\1\11\1\1\2\11"+
    "\2\1\1\11\2\1\2\11\2\1\2\11\4\1\1\11"+
    "\3\1\1\11\1\1\4\0\1\11\1\1\3\0\2\11"+
    "\13\0\1\11\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\4\0\1\11\2\0\1\11\1\1\1\0\1\11\1\1"+
    "\1\0\2\11\6\0\1\11\10\0\1\11\3\0\1\11"+
    "\1\0\1\11\1\1\3\11\4\0\1\11\4\0\1\11"+
    "\4\0\2\11\6\0\2\11\2\1\1\0\2\11\2\0"+
    "\1\11\1\0\2\11\1\1\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private int braceNestingLevel = 0;
    private int parensNestingLevel = 0;
    private Stack<Integer> stateStack = new Stack<>();

    public void yyPushState(int newState) {
        stateStack.push(yystate());
        yybegin(newState);
    }

    public void yyReplaceState(int newState) {
        // Since the top of the stack is the previous state we want to pop to when replacing
        // the current state, we don't need to do any stack manipulation here.
        yybegin(newState);
    }

    public void yyResetState(int newState) {
        stateStack.clear();
        stateStack.push(yystate());
        yybegin(newState);
    }

    public void yyPopState() {
        yybegin(stateStack.pop());
    }

    public int peekPreviousState() {
        return stateStack.peek();
    }

    // Resolves the default token for given state, e.g., GO_ROOT_FRAGMENT for YYNITIAL.
    public IElementType resolveStateDefaultToken(int state) {
        switch (state) {
            case YYINITIAL: return GO_ROOT_FRAGMENT;
            case IN_EXPR: return GO_EXPR;
//            case IN_COMPONENT_IMPORT_PARAMS: return GO_COMPONENT_IMPORT_PARAMS;
            case IN_TEMPL_DECLARATION_START: return DECL_GO_TOKEN;
            default: throw new IllegalStateException("Unknown default token for state: " + state);
        }
    }

    public boolean isCommentEnabled() {
        return !Arrays.contains(new int[]{IN_BLOCK_COMMENT, IN_GO_STRING, IN_GO_RAW_STRING}, yystate());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TemplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 69: break;
          case 2:
            { yyPushState(IN_GO_STRING);
        return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 70: break;
          case 3:
            { yyPushState(IN_GO_RAW_STRING);
        return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 71: break;
          case 4:
            { return DECL_GO_TOKEN;
            }
          // fall through
          case 72: break;
          case 5:
            { return HTML_FRAGMENT;
            }
          // fall through
          case 73: break;
          case 6:
            { yyPushState(IN_HTML_TAG_OPENER);
        return HTML_FRAGMENT;
            }
          // fall through
          case 74: break;
          case 7:
            { yypushback(1); // IN_EXPR handles brace nesting
        yyPushState(IN_EXPR);
            }
          // fall through
          case 75: break;
          case 8:
            { return RBRACE;
            }
          // fall through
          case 76: break;
          case 9:
            { yypushback(1);
        yyPushState(IN_COMPONENT_IMPORT);
        return WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 10:
            { yyResetState(YYINITIAL);
        return RBRACE;
            }
          // fall through
          case 78: break;
          case 11:
            { yyResetState(YYINITIAL);
    return BAD_CHARACTER;
            }
          // fall through
          case 79: break;
          case 12:
            { return WHITE_SPACE;
            }
          // fall through
          case 80: break;
          case 13:
            { yypushback(1); // IN_CSS_DECLARATION_PARAMS handles parens nesting
        yyPushState(IN_CSS_DECLARATION_PARAMS);
            }
          // fall through
          case 81: break;
          case 14:
            { return CSS_CLASS_ID;
            }
          // fall through
          case 82: break;
          case 15:
            { return GO_CSS_DECL_PARAMS;
            }
          // fall through
          case 83: break;
          case 16:
            { parensNestingLevel++;
        if (parensNestingLevel == 1) {
            return LPARENTH;
        }
            }
          // fall through
          case 84: break;
          case 17:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yyPopState(); // IN_CSS_DECLARATION_START
            return RPARENTH;
        }
            }
          // fall through
          case 85: break;
          case 18:
            { return CSS_PROPERTIES;
            }
          // fall through
          case 86: break;
          case 19:
            { return SCRIPT_FUNCTION_DECL;
            }
          // fall through
          case 87: break;
          case 20:
            { return SCRIPT_BODY;
            }
          // fall through
          case 88: break;
          case 21:
            { return GO_FRAGMENT;
            }
          // fall through
          case 89: break;
          case 22:
            { return GO_EXPR;
            }
          // fall through
          case 90: break;
          case 23:
            { braceNestingLevel++;
        return LBRACE;
            }
          // fall through
          case 91: break;
          case 24:
            { braceNestingLevel--;
       if (braceNestingLevel == 0) {
           yyPopState(); // IN_COMPONENT_IMPORT
       }
       return RBRACE;
            }
          // fall through
          case 92: break;
          case 25:
            { return TEMPL_FRAGMENT;
            }
          // fall through
          case 93: break;
          case 26:
            { braceNestingLevel++;
        return TEMPL_FRAGMENT;
            }
          // fall through
          case 94: break;
          case 27:
            { braceNestingLevel--;
       if (braceNestingLevel == 0) {
           yyPopState(); // IN_HTML_TAG_OPENER
       }
       return TEMPL_FRAGMENT;
            }
          // fall through
          case 95: break;
          case 28:
            { return COMPONENT_REFERENCE;
            }
          // fall through
          case 96: break;
          case 29:
            { return COMPONENT_IMPORT_START;
            }
          // fall through
          case 97: break;
          case 30:
            { yyPopState(); // IN_TEMPL_DECLARATION_BODY
        return LBRACE;
            }
          // fall through
          case 98: break;
          case 31:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 99: break;
          case 32:
            { return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 100: break;
          case 33:
            { yyPopState();
        return resolveStateDefaultToken(yystate());
            }
          // fall through
          case 101: break;
          case 34:
            { yyPopState();
        yypushback(1); // So that we can detect component imports "@" straight after ">".
            }
          // fall through
          case 102: break;
          case 35:
            { if (isCommentEnabled()) {
        yyPushState(IN_BLOCK_COMMENT);
        return BLOCK_COMMENT;
    }
    yypushback(yylength() - 1);
            }
          // fall through
          case 103: break;
          case 36:
            { if (isCommentEnabled()) {
        return LINE_COMMENT;
    }
    yypushback(yylength() - 1);
            }
          // fall through
          case 104: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyReplaceState(IN_TEMPL_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 105: break;
          case 38:
            { yypushback(1);
        yyPushState(IN_COMPONENT_IMPORT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 106: break;
          case 39:
            { yyPushState(IN_RAW_GO);
        return DOUBLE_LBRACE;
            }
          // fall through
          case 107: break;
          case 40:
            { yypushback(2);
        yyPushState(IN_GO_BLOCK_START);
        return WHITE_SPACE;
            }
          // fall through
          case 108: break;
          case 41:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyPushState(IN_CSS_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 109: break;
          case 42:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyReplaceState(IN_SCRIPT_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 110: break;
          case 43:
            { yyPopState();
        return DOUBLE_RBRACE;
            }
          // fall through
          case 111: break;
          case 44:
            { return GO_IF;
            }
          // fall through
          case 112: break;
          case 45:
            { yyPopState();
        return LBRACE;
            }
          // fall through
          case 113: break;
          case 46:
            { yypushback(yylength()-1);
        yyPopState();
        return COMPONENT_REFERENCE;
            }
          // fall through
          case 114: break;
          case 47:
            { yyPopState();
        return BLOCK_COMMENT;
            }
          // fall through
          case 115: break;
          case 48:
            { // Ignore escaped quotes.
        return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 116: break;
          case 49:
            { yyPushState(IN_CSS_DECLARATION_START);
        return CSS_DECL_START;
            }
          // fall through
          case 117: break;
          case 50:
            { yypushback(3);
        yyPushState(IN_GO_BLOCK_START);
        return WHITE_SPACE;
            }
          // fall through
          case 118: break;
          case 51:
            { return GO_FOR;
            }
          // fall through
          case 119: break;
          case 52:
            { yypushback(yylength()-1);
        yyReplaceState(IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START);
        return WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 53:
            { yyPopState();
        return HTML_FRAGMENT;
            }
          // fall through
          case 121: break;
          case 54:
            { // Skip over attribute value so that we don't detect keywords in it.
        return HTML_FRAGMENT;
            }
          // fall through
          case 122: break;
          case 55:
            { yypushback(1); // IN_EXPR handles brace nesting
        yyPushState(IN_EXPR);
        return BOOL_EXPR_START;
            }
          // fall through
          case 123: break;
          case 56:
            { yyPushState(IN_HTML_COMMENT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 124: break;
          case 57:
            { return GO_ELSE;
            }
          // fall through
          case 125: break;
          case 58:
            { yyPushState(IN_TEMPL_DECLARATION_START);
        return HTML_DECL_START;
            }
          // fall through
          case 126: break;
          case 59:
            { yypushback(yylength() - 1);
        yyPushState(IN_GO_BLOCK_START);
        return RBRACE;
            }
          // fall through
          case 127: break;
          case 60:
            { yyPushState(IN_SCRIPT_DECLARATION_START);
        return SCRIPT_DECL_START;
            }
          // fall through
          case 128: break;
          case 61:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_CASE_FRAGMENT;
            }
          // fall through
          case 129: break;
          case 62:
            { yypushback(6);
        yyPushState(IN_GO_BLOCK_START);
        return WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 63:
            { return GO_SWITCH;
            }
          // fall through
          case 131: break;
          case 64:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_CASE_FRAGMENT;
            }
          // fall through
          case 132: break;
          case 65:
            { // skip over class attributes for now
        yypushback(1);
        yyPushState(IN_CLASS_EXPR);
        return HTML_FRAGMENT;
            }
          // fall through
          case 133: break;
          case 66:
            { return GO_PACKAGE_FRAGMENT;
            }
          // fall through
          case 134: break;
          case 67:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 135: break;
          case 68:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
